{"metadata":{"modules":[{"name":"PushwooshVoIP"}],"role":"article","title":"Code Examples","roleHeading":"Article"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This guide provides working code examples for typical use cases with PushwooshVoIP module.","type":"text"}]},{"text":"Basic Setup","level":2,"anchor":"Basic-Setup","type":"heading"},{"text":"Minimal Configuration","level":3,"anchor":"Minimal-Configuration","type":"heading"},{"code":["import UIKit","import PushwooshFramework","import PushwooshVoIP","import CallKit","import PushKit","","@main","class AppDelegate: UIResponder, UIApplicationDelegate, PWVoIPCallDelegate {","","    func application(","        _ application: UIApplication,","        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?","    ) -> Bool {","","        Pushwoosh.VoIP.initializeVoIP(false, ringtoneSound: nil, handleTypes: 2)","        Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","        Pushwoosh.VoIP.delegate = self","","        return true","    }","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        print(\"Incoming call: \\(payload.callerName ?? \"Unknown\")\")","    }","","    func pwProviderDidReset(_ provider: CXProvider) {","        print(\"Provider reset\")","    }","","    func pwProviderDidBegin(_ provider: CXProvider) {","        print(\"Provider ready\")","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Handling-Incoming-Calls","type":"heading","text":"Handling Incoming Calls","level":2},{"level":3,"type":"heading","anchor":"Store-Call-Information","text":"Store Call Information"},{"syntax":"swift","type":"codeListing","code":["class CallManager {","    static let shared = CallManager()","","    private var activeCalls: [UUID: CallInfo] = [:]","","    struct CallInfo {","        let uuid: UUID","        let callerName: String","        let hasVideo: Bool","        let timestamp: Date","    }","","    func storeCall(_ payload: PWVoIPMessage) {","        guard let uuidString = payload.uuid,","              let uuid = UUID(uuidString: uuidString) else {","            return","        }","","        let callInfo = CallInfo(","            uuid: uuid,","            callerName: payload.callerName ?? \"Unknown\",","            hasVideo: payload.hasVideo,","            timestamp: Date()","        )","","        activeCalls[uuid] = callInfo","    }","","    func getCall(uuid: UUID) -> CallInfo? {","        return activeCalls[uuid]","    }","","    func removeCall(uuid: UUID) {","        activeCalls.removeValue(forKey: uuid)","    }","}","","extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        CallManager.shared.storeCall(payload)","    }","}"]},{"type":"heading","level":3,"text":"Answer Call","anchor":"Answer-Call"},{"type":"codeListing","syntax":"swift","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXAnswerCallAction) {","        let callUUID = action.callUUID","","        guard let callInfo = CallManager.shared.getCall(uuid: callUUID) else {","            action.fail()","            return","        }","","        let audioSession = AVAudioSession.sharedInstance()","        do {","            try audioSession.setCategory(.playAndRecord, mode: .voiceChat)","            try audioSession.setActive(true)","        } catch {","            action.fail()","            return","        }","","        startCallWithPeer(callInfo.callerName)","        action.fulfill()","    }","","    private func startCallWithPeer(_ peerName: String) {","        print(\"Starting call with \\(peerName)\")","    }","}"]},{"level":3,"type":"heading","text":"End Call","anchor":"End-Call"},{"type":"codeListing","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXEndCallAction) {","        let callUUID = action.callUUID","","        endCallSession(callUUID)","        CallManager.shared.removeCall(uuid: callUUID)","","        let audioSession = AVAudioSession.sharedInstance()","        try? audioSession.setActive(false, options: .notifyOthersOnDeactivation)","","        action.fulfill()","    }","","    private func endCallSession(_ uuid: UUID) {","        print(\"Ending call: \\(uuid)\")","    }","}"],"syntax":"swift"},{"text":"Call Controls","level":2,"anchor":"Call-Controls","type":"heading"},{"type":"heading","text":"Mute\/Unmute","level":3,"anchor":"MuteUnmute"},{"type":"codeListing","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXSetMutedCallAction) {","        let isMuted = action.isMuted","","        if isMuted {","            disableMicrophone()","        } else {","            enableMicrophone()","        }","","        action.fulfill()","    }","","    private func disableMicrophone() {","        print(\"Microphone disabled\")","    }","","    private func enableMicrophone() {","        print(\"Microphone enabled\")","    }","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Hold\/Resume","anchor":"HoldResume"},{"type":"codeListing","syntax":"swift","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXSetHeldCallAction) {","        let callUUID = action.callUUID","        let isOnHold = action.isOnHold","","        if isOnHold {","            pauseCall(callUUID)","        } else {","            resumeCall(callUUID)","        }","","        action.fulfill()","    }","","    private func pauseCall(_ uuid: UUID) {","        print(\"Call paused: \\(uuid)\")","    }","","    private func resumeCall(_ uuid: UUID) {","        print(\"Call resumed: \\(uuid)\")","    }","}"]},{"type":"heading","anchor":"Token-Management","text":"Token Management","level":2},{"text":"Monitor Token Registration","anchor":"Monitor-Token-Registration","type":"heading","level":3},{"type":"codeListing","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidRegisterVoIPToken(token: String) {","        print(\"VoIP token registered: \\(token)\")","","        UserDefaults.standard.set(token, forKey: \"voip_token\")","        UserDefaults.standard.set(Date(), forKey: \"voip_token_date\")","","        sendTokenToBackend(token)","    }","","    func voipDidFailRegisterVoIPToken(error: String) {","        print(\"Token registration failed: \\(error)\")","","        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {","            self.retryTokenRegistration()","        }","    }","","    private func sendTokenToBackend(_ token: String) {","        print(\"Sending token to backend\")","    }","","    private func retryTokenRegistration() {","        Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","    }","}"],"syntax":"swift"},{"anchor":"Video-Calls","text":"Video Calls","level":2,"type":"heading"},{"text":"Enable Video Support","level":3,"type":"heading","anchor":"Enable-Video-Support"},{"syntax":"swift","type":"codeListing","code":["func application(","    _ application: UIApplication,","    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?",") -> Bool {","","    Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 2)","    Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","    Pushwoosh.VoIP.delegate = self","","    return true","}","","extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        if payload.hasVideo {","            print(\"Incoming VIDEO call\")","            prepareVideoCallUI()","        } else {","            print(\"Incoming AUDIO call\")","            prepareAudioCallUI()","        }","","        CallManager.shared.storeCall(payload)","    }","","    private func prepareVideoCallUI() {","        print(\"Preparing video call UI\")","    }","","    private func prepareAudioCallUI() {","        print(\"Preparing audio call UI\")","    }","}"]},{"level":2,"anchor":"Handle-Types","text":"Handle Types","type":"heading"},{"anchor":"Phone-Number-Format","text":"Phone Number Format","type":"heading","level":3},{"type":"codeListing","syntax":"swift","code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 2)"]},{"type":"heading","level":3,"anchor":"Email-Format","text":"Email Format"},{"code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 3)"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","anchor":"Generic-Format","text":"Generic Format"},{"type":"codeListing","syntax":"swift","code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 1)"]},{"text":"Error Handling","type":"heading","anchor":"Error-Handling","level":2},{"level":3,"text":"Handle Provider Reset","type":"heading","anchor":"Handle-Provider-Reset"},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwProviderDidReset(_ provider: CXProvider) {","        print(\"CallKit provider reset\")","","        let allCallUUIDs = CallManager.shared.getAllCallUUIDs()","        for uuid in allCallUUIDs {","            endCallSession(uuid)","            CallManager.shared.removeCall(uuid: uuid)","        }","","        let audioSession = AVAudioSession.sharedInstance()","        try? audioSession.setActive(false)","","        print(\"All calls terminated\")","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Next Steps","anchor":"Next-Steps","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted","isActive":true,"type":"reference"},{"type":"text","text":" - Quick start guide"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/PWVoIPCallDelegate"},{"type":"text","text":" - Full delegate reference"}],"type":"paragraph"}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/pushwooshvoip\/examples"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/pushwooshvoip\/examples"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"],"generated":true,"title":"Getting Started"}],"abstract":[{"type":"text","text":"Practical examples for common VoIP integration scenarios."}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/Examples"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP"]]},"references":{"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP/PWVoIPCallDelegate":{"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PWVoIPCallDelegate"}],"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/PWVoIPCallDelegate","url":"\/documentation\/pushwooshvoip\/pwvoipcalldelegate","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"PWVoIPCallDelegate","kind":"identifier"}],"role":"symbol","title":"PWVoIPCallDelegate","abstract":[{"text":"Delegate protocol for receiving VoIP call events and CallKit callbacks.","type":"text"}]},"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP","url":"\/documentation\/pushwooshvoip","role":"collection","title":"PushwooshVoIP","abstract":[{"text":"VoIP push notifications with native call UI for iOS applications.","type":"text"}]},"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP/GettingStarted":{"title":"Getting Started","kind":"article","abstract":[{"type":"text","text":"Set up VoIP push notifications with CallKit in your iOS app."}],"url":"\/documentation\/pushwooshvoip\/gettingstarted","identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted","type":"topic","role":"article"}},"variantOverrides":[{"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"},{"value":null,"path":"\/topicSections","op":"add"},{"path":"\/seeAlsoSections","op":"replace","value":[{"identifiers":["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"],"generated":true,"title":"Getting Started"}]},{"op":"replace","path":"\/references\/doc:~1~1com.pushwoosh.PushwooshVoIP~1documentation~1PushwooshVoIP~1PWVoIPCallDelegate\/title","value":"PWVoIPCallDelegate"},{"value":[{"text":"PWVoIPCallDelegate","kind":"identifier"}],"path":"\/references\/doc:~1~1com.pushwoosh.PushwooshVoIP~1documentation~1PushwooshVoIP~1PWVoIPCallDelegate\/fragments","op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}