{"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This guide provides working code examples for typical use cases with PushwooshVoIP module."}],"type":"paragraph"},{"level":2,"anchor":"Basic-Setup","type":"heading","text":"Basic Setup"},{"text":"Minimal Configuration","anchor":"Minimal-Configuration","type":"heading","level":3},{"syntax":"swift","type":"codeListing","code":["import UIKit","import PushwooshFramework","import PushwooshVoIP","import CallKit","import PushKit","","@main","class AppDelegate: UIResponder, UIApplicationDelegate, PWVoIPCallDelegate {","","    func application(","        _ application: UIApplication,","        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?","    ) -> Bool {","","        Pushwoosh.VoIP.initializeVoIP(false, ringtoneSound: nil, handleTypes: 2)","        Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","        Pushwoosh.VoIP.delegate = self","","        return true","    }","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        print(\"Incoming call: \\(payload.callerName ?? \"Unknown\")\")","    }","","    func pwProviderDidReset(_ provider: CXProvider) {","        print(\"Provider reset\")","    }","","    func pwProviderDidBegin(_ provider: CXProvider) {","        print(\"Provider ready\")","    }","}"]},{"type":"heading","text":"Handling Incoming Calls","level":2,"anchor":"Handling-Incoming-Calls"},{"type":"heading","level":3,"text":"Store Call Information","anchor":"Store-Call-Information"},{"type":"codeListing","syntax":"swift","code":["class CallManager {","    static let shared = CallManager()","","    private var activeCalls: [UUID: CallInfo] = [:]","","    struct CallInfo {","        let uuid: UUID","        let callerName: String","        let hasVideo: Bool","        let timestamp: Date","    }","","    func storeCall(_ payload: PWVoIPMessage) {","        guard let uuidString = payload.uuid,","              let uuid = UUID(uuidString: uuidString) else {","            return","        }","","        let callInfo = CallInfo(","            uuid: uuid,","            callerName: payload.callerName ?? \"Unknown\",","            hasVideo: payload.hasVideo,","            timestamp: Date()","        )","","        activeCalls[uuid] = callInfo","    }","","    func getCall(uuid: UUID) -> CallInfo? {","        return activeCalls[uuid]","    }","","    func removeCall(uuid: UUID) {","        activeCalls.removeValue(forKey: uuid)","    }","}","","extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        CallManager.shared.storeCall(payload)","    }","}"]},{"anchor":"Answer-Call","type":"heading","level":3,"text":"Answer Call"},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXAnswerCallAction) {","        let callUUID = action.callUUID","","        guard let callInfo = CallManager.shared.getCall(uuid: callUUID) else {","            action.fail()","            return","        }","","        let audioSession = AVAudioSession.sharedInstance()","        do {","            try audioSession.setCategory(.playAndRecord, mode: .voiceChat)","            try audioSession.setActive(true)","        } catch {","            action.fail()","            return","        }","","        startCallWithPeer(callInfo.callerName)","        action.fulfill()","    }","","    private func startCallWithPeer(_ peerName: String) {","        print(\"Starting call with \\(peerName)\")","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"End Call","anchor":"End-Call","type":"heading"},{"syntax":"swift","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXEndCallAction) {","        let callUUID = action.callUUID","","        endCallSession(callUUID)","        CallManager.shared.removeCall(uuid: callUUID)","","        let audioSession = AVAudioSession.sharedInstance()","        try? audioSession.setActive(false, options: .notifyOthersOnDeactivation)","","        action.fulfill()","    }","","    private func endCallSession(_ uuid: UUID) {","        print(\"Ending call: \\(uuid)\")","    }","}"],"type":"codeListing"},{"level":2,"type":"heading","anchor":"Call-Controls","text":"Call Controls"},{"text":"Mute\/Unmute","level":3,"anchor":"MuteUnmute","type":"heading"},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXSetMutedCallAction) {","        let isMuted = action.isMuted","","        if isMuted {","            disableMicrophone()","        } else {","            enableMicrophone()","        }","","        action.fulfill()","    }","","    private func disableMicrophone() {","        print(\"Microphone disabled\")","    }","","    private func enableMicrophone() {","        print(\"Microphone enabled\")","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"HoldResume","text":"Hold\/Resume","level":3},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXSetHeldCallAction) {","        let callUUID = action.callUUID","        let isOnHold = action.isOnHold","","        if isOnHold {","            pauseCall(callUUID)","        } else {","            resumeCall(callUUID)","        }","","        action.fulfill()","    }","","    private func pauseCall(_ uuid: UUID) {","        print(\"Call paused: \\(uuid)\")","    }","","    private func resumeCall(_ uuid: UUID) {","        print(\"Call resumed: \\(uuid)\")","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Token Management","level":2,"type":"heading","anchor":"Token-Management"},{"anchor":"Monitor-Token-Registration","type":"heading","level":3,"text":"Monitor Token Registration"},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidRegisterVoIPToken(token: String) {","        print(\"VoIP token registered: \\(token)\")","","        UserDefaults.standard.set(token, forKey: \"voip_token\")","        UserDefaults.standard.set(Date(), forKey: \"voip_token_date\")","","        sendTokenToBackend(token)","    }","","    func voipDidFailRegisterVoIPToken(error: String) {","        print(\"Token registration failed: \\(error)\")","","        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {","            self.retryTokenRegistration()","        }","    }","","    private func sendTokenToBackend(_ token: String) {","        print(\"Sending token to backend\")","    }","","    private func retryTokenRegistration() {","        Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Video Calls","type":"heading","anchor":"Video-Calls","level":2},{"level":3,"type":"heading","text":"Enable Video Support","anchor":"Enable-Video-Support"},{"code":["func application(","    _ application: UIApplication,","    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?",") -> Bool {","","    Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 2)","    Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","    Pushwoosh.VoIP.delegate = self","","    return true","}","","extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        if payload.hasVideo {","            print(\"Incoming VIDEO call\")","            prepareVideoCallUI()","        } else {","            print(\"Incoming AUDIO call\")","            prepareAudioCallUI()","        }","","        CallManager.shared.storeCall(payload)","    }","","    private func prepareVideoCallUI() {","        print(\"Preparing video call UI\")","    }","","    private func prepareAudioCallUI() {","        print(\"Preparing audio call UI\")","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Handle-Types","text":"Handle Types","type":"heading","level":2},{"type":"heading","anchor":"Phone-Number-Format","text":"Phone Number Format","level":3},{"syntax":"swift","type":"codeListing","code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 2)"]},{"anchor":"Email-Format","type":"heading","level":3,"text":"Email Format"},{"syntax":"swift","type":"codeListing","code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 3)"]},{"text":"Generic Format","level":3,"type":"heading","anchor":"Generic-Format"},{"syntax":"swift","code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 1)"],"type":"codeListing"},{"anchor":"Error-Handling","level":2,"text":"Error Handling","type":"heading"},{"level":3,"anchor":"Handle-Provider-Reset","type":"heading","text":"Handle Provider Reset"},{"syntax":"swift","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwProviderDidReset(_ provider: CXProvider) {","        print(\"CallKit provider reset\")","","        let allCallUUIDs = CallManager.shared.getAllCallUUIDs()","        for uuid in allCallUUIDs {","            endCallSession(uuid)","            CallManager.shared.removeCall(uuid: uuid)","        }","","        let audioSession = AVAudioSession.sharedInstance()","        try? audioSession.setActive(false)","","        print(\"All calls terminated\")","    }","}"],"type":"codeListing"},{"text":"Next Steps","anchor":"Next-Steps","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted","type":"reference","isActive":true},{"text":" - Quick start guide","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/PWVoIPCallDelegate","isActive":true},{"type":"text","text":" - Full delegate reference"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"abstract":[{"text":"Practical examples for common VoIP integration scenarios.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP"]]},"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"],"generated":true}],"variants":[{"paths":["\/documentation\/pushwooshvoip\/examples"],"traits":[{"interfaceLanguage":"swift"}]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/pushwooshvoip\/examples"]}],"metadata":{"role":"article","roleHeading":"Article","title":"Code Examples","modules":[{"name":"PushwooshVoIP"}]},"identifier":{"url":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/Examples","interfaceLanguage":"swift"},"references":{"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP/GettingStarted":{"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted","url":"\/documentation\/pushwooshvoip\/gettingstarted","kind":"article","abstract":[{"text":"Set up VoIP push notifications with CallKit in your iOS app.","type":"text"}],"type":"topic","role":"article","title":"Getting Started"},"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP":{"title":"PushwooshVoIP","kind":"symbol","type":"topic","url":"\/documentation\/pushwooshvoip","identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP","abstract":[{"type":"text","text":"VoIP push notifications with native call UI for iOS applications."}],"role":"collection"},"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP/PWVoIPCallDelegate":{"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/PWVoIPCallDelegate","type":"topic","abstract":[{"type":"text","text":"Delegate protocol for receiving VoIP call events and CallKit callbacks."}],"url":"\/documentation\/pushwooshvoip\/pwvoipcalldelegate","role":"symbol","kind":"symbol","title":"PWVoIPCallDelegate","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PWVoIPCallDelegate","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PWVoIPCallDelegate"}]}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"},{"path":"\/topicSections","op":"add","value":null},{"op":"replace","path":"\/seeAlsoSections","value":[{"title":"Getting Started","identifiers":["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"],"generated":true}]},{"path":"\/references\/doc:~1~1com.pushwoosh.PushwooshVoIP~1documentation~1PushwooshVoIP~1PWVoIPCallDelegate\/title","op":"replace","value":"PWVoIPCallDelegate"},{"value":[{"text":"PWVoIPCallDelegate","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.pushwoosh.PushwooshVoIP~1documentation~1PushwooshVoIP~1PWVoIPCallDelegate\/fragments"}]}]}