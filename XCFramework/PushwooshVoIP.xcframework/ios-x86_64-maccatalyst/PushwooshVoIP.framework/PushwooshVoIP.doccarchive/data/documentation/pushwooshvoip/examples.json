{"metadata":{"roleHeading":"Article","role":"article","title":"Code Examples","modules":[{"name":"PushwooshVoIP"}]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/pushwooshvoip\/examples"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/pushwooshvoip\/examples"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/Examples","interfaceLanguage":"swift"},"kind":"article","seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP"]]},"abstract":[{"text":"Practical examples for common VoIP integration scenarios.","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This guide provides working code examples for typical use cases with PushwooshVoIP module.","type":"text"}]},{"type":"heading","level":2,"text":"Basic Setup","anchor":"Basic-Setup"},{"type":"heading","level":3,"anchor":"Minimal-Configuration","text":"Minimal Configuration"},{"code":["import UIKit","import PushwooshFramework","import PushwooshVoIP","import CallKit","import PushKit","","@main","class AppDelegate: UIResponder, UIApplicationDelegate, PWVoIPCallDelegate {","","    func application(","        _ application: UIApplication,","        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?","    ) -> Bool {","","        Pushwoosh.VoIP.initializeVoIP(false, ringtoneSound: nil, handleTypes: 2)","        Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","        Pushwoosh.VoIP.delegate = self","","        return true","    }","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        print(\"Incoming call: \\(payload.callerName ?? \"Unknown\")\")","    }","","    func pwProviderDidReset(_ provider: CXProvider) {","        print(\"Provider reset\")","    }","","    func pwProviderDidBegin(_ provider: CXProvider) {","        print(\"Provider ready\")","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Handling-Incoming-Calls","type":"heading","level":2,"text":"Handling Incoming Calls"},{"text":"Store Call Information","type":"heading","level":3,"anchor":"Store-Call-Information"},{"type":"codeListing","code":["class CallManager {","    static let shared = CallManager()","","    private var activeCalls: [UUID: CallInfo] = [:]","","    struct CallInfo {","        let uuid: UUID","        let callerName: String","        let hasVideo: Bool","        let timestamp: Date","    }","","    func storeCall(_ payload: PWVoIPMessage) {","        guard let uuidString = payload.uuid,","              let uuid = UUID(uuidString: uuidString) else {","            return","        }","","        let callInfo = CallInfo(","            uuid: uuid,","            callerName: payload.callerName ?? \"Unknown\",","            hasVideo: payload.hasVideo,","            timestamp: Date()","        )","","        activeCalls[uuid] = callInfo","    }","","    func getCall(uuid: UUID) -> CallInfo? {","        return activeCalls[uuid]","    }","","    func removeCall(uuid: UUID) {","        activeCalls.removeValue(forKey: uuid)","    }","}","","extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        CallManager.shared.storeCall(payload)","    }","}"],"syntax":"swift"},{"type":"heading","anchor":"Answer-Call","text":"Answer Call","level":3},{"syntax":"swift","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXAnswerCallAction) {","        let callUUID = action.callUUID","","        guard let callInfo = CallManager.shared.getCall(uuid: callUUID) else {","            action.fail()","            return","        }","","        let audioSession = AVAudioSession.sharedInstance()","        do {","            try audioSession.setCategory(.playAndRecord, mode: .voiceChat)","            try audioSession.setActive(true)","        } catch {","            action.fail()","            return","        }","","        startCallWithPeer(callInfo.callerName)","        action.fulfill()","    }","","    private func startCallWithPeer(_ peerName: String) {","        print(\"Starting call with \\(peerName)\")","    }","}"],"type":"codeListing"},{"text":"End Call","level":3,"anchor":"End-Call","type":"heading"},{"syntax":"swift","code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXEndCallAction) {","        let callUUID = action.callUUID","","        endCallSession(callUUID)","        CallManager.shared.removeCall(uuid: callUUID)","","        let audioSession = AVAudioSession.sharedInstance()","        try? audioSession.setActive(false, options: .notifyOthersOnDeactivation)","","        action.fulfill()","    }","","    private func endCallSession(_ uuid: UUID) {","        print(\"Ending call: \\(uuid)\")","    }","}"],"type":"codeListing"},{"level":2,"text":"Call Controls","anchor":"Call-Controls","type":"heading"},{"type":"heading","text":"Mute\/Unmute","level":3,"anchor":"MuteUnmute"},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXSetMutedCallAction) {","        let isMuted = action.isMuted","","        if isMuted {","            disableMicrophone()","        } else {","            enableMicrophone()","        }","","        action.fulfill()","    }","","    private func disableMicrophone() {","        print(\"Microphone disabled\")","    }","","    private func enableMicrophone() {","        print(\"Microphone enabled\")","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Hold\/Resume","type":"heading","anchor":"HoldResume"},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwPerform(_ action: CXSetHeldCallAction) {","        let callUUID = action.callUUID","        let isOnHold = action.isOnHold","","        if isOnHold {","            pauseCall(callUUID)","        } else {","            resumeCall(callUUID)","        }","","        action.fulfill()","    }","","    private func pauseCall(_ uuid: UUID) {","        print(\"Call paused: \\(uuid)\")","    }","","    private func resumeCall(_ uuid: UUID) {","        print(\"Call resumed: \\(uuid)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Token Management","type":"heading","level":2,"anchor":"Token-Management"},{"text":"Monitor Token Registration","anchor":"Monitor-Token-Registration","type":"heading","level":3},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidRegisterVoIPToken(token: String) {","        print(\"VoIP token registered: \\(token)\")","","        UserDefaults.standard.set(token, forKey: \"voip_token\")","        UserDefaults.standard.set(Date(), forKey: \"voip_token_date\")","","        sendTokenToBackend(token)","    }","","    func voipDidFailRegisterVoIPToken(error: String) {","        print(\"Token registration failed: \\(error)\")","","        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {","            self.retryTokenRegistration()","        }","    }","","    private func sendTokenToBackend(_ token: String) {","        print(\"Sending token to backend\")","    }","","    private func retryTokenRegistration() {","        Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Video Calls","type":"heading","level":2,"anchor":"Video-Calls"},{"anchor":"Enable-Video-Support","type":"heading","text":"Enable Video Support","level":3},{"code":["func application(","    _ application: UIApplication,","    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?",") -> Bool {","","    Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 2)","    Pushwoosh.VoIP.setPushwooshVoIPAppId(\"YOUR-VOIP-APP-CODE\")","    Pushwoosh.VoIP.delegate = self","","    return true","}","","extension AppDelegate: PWVoIPCallDelegate {","","    func voipDidReceiveIncomingCall(payload: PushwooshVoIP.PWVoIPMessage) {","        if payload.hasVideo {","            print(\"Incoming VIDEO call\")","            prepareVideoCallUI()","        } else {","            print(\"Incoming AUDIO call\")","            prepareAudioCallUI()","        }","","        CallManager.shared.storeCall(payload)","    }","","    private func prepareVideoCallUI() {","        print(\"Preparing video call UI\")","    }","","    private func prepareAudioCallUI() {","        print(\"Preparing audio call UI\")","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Handle Types","type":"heading","anchor":"Handle-Types"},{"level":3,"type":"heading","anchor":"Phone-Number-Format","text":"Phone Number Format"},{"code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 2)"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Email-Format","type":"heading","text":"Email Format"},{"code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 3)"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Generic-Format","text":"Generic Format","level":3},{"code":["Pushwoosh.VoIP.initializeVoIP(true, ringtoneSound: nil, handleTypes: 1)"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Error Handling","type":"heading","anchor":"Error-Handling"},{"anchor":"Handle-Provider-Reset","type":"heading","text":"Handle Provider Reset","level":3},{"code":["extension AppDelegate: PWVoIPCallDelegate {","","    func pwProviderDidReset(_ provider: CXProvider) {","        print(\"CallKit provider reset\")","","        let allCallUUIDs = CallManager.shared.getAllCallUUIDs()","        for uuid in allCallUUIDs {","            endCallSession(uuid)","            CallManager.shared.removeCall(uuid: uuid)","        }","","        let audioSession = AVAudioSession.sharedInstance()","        try? audioSession.setActive(false)","","        print(\"All calls terminated\")","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Next-Steps","text":"Next Steps","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"},{"type":"text","text":" - Quick start guide"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/PWVoIPCallDelegate","isActive":true,"type":"reference"},{"type":"text","text":" - Full delegate reference"}]}]}]}],"kind":"content"}],"references":{"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP":{"kind":"symbol","identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP","role":"collection","type":"topic","url":"\/documentation\/pushwooshvoip","abstract":[{"text":"VoIP push notifications with native call UI for iOS applications.","type":"text"}],"title":"PushwooshVoIP"},"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP/GettingStarted":{"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted","role":"article","abstract":[{"type":"text","text":"Set up VoIP push notifications with CallKit in your iOS app."}],"title":"Getting Started","url":"\/documentation\/pushwooshvoip\/gettingstarted","kind":"article","type":"topic"},"doc://com.pushwoosh.PushwooshVoIP/documentation/PushwooshVoIP/PWVoIPCallDelegate":{"type":"topic","url":"\/documentation\/pushwooshvoip\/pwvoipcalldelegate","title":"PWVoIPCallDelegate","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PWVoIPCallDelegate"}],"identifier":"doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/PWVoIPCallDelegate","abstract":[{"type":"text","text":"Delegate protocol for receiving VoIP call events and CallKit callbacks."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"PWVoIPCallDelegate","kind":"identifier"}],"role":"symbol"}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","value":"occ","op":"replace"},{"value":null,"path":"\/topicSections","op":"add"},{"path":"\/seeAlsoSections","op":"replace","value":[{"title":"Getting Started","identifiers":["doc:\/\/com.pushwoosh.PushwooshVoIP\/documentation\/PushwooshVoIP\/GettingStarted"],"generated":true}]},{"op":"replace","value":"PWVoIPCallDelegate","path":"\/references\/doc:~1~1com.pushwoosh.PushwooshVoIP~1documentation~1PushwooshVoIP~1PWVoIPCallDelegate\/title"},{"op":"replace","path":"\/references\/doc:~1~1com.pushwoosh.PushwooshVoIP~1documentation~1PushwooshVoIP~1PWVoIPCallDelegate\/fragments","value":[{"kind":"identifier","text":"PWVoIPCallDelegate"}]}],"traits":[{"interfaceLanguage":"occ"}]}]}