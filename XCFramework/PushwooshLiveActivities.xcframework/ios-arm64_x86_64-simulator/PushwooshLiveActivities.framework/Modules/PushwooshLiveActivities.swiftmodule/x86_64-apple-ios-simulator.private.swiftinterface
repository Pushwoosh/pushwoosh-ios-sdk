// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PushwooshLiveActivities
import ActivityKit
import Foundation
import PushwooshBridge
import PushwooshCore
@_exported import PushwooshLiveActivities
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 16.1, *)
public protocol PushwooshLiveActivityAttributes : ActivityKit.ActivityAttributes where Self.ContentState : PushwooshLiveActivities.PushwooshLiveActivityContentState {
  var pushwoosh: PushwooshLiveActivities.PushwooshLiveActivityAttributeData { get set }
}
public struct PushwooshLiveActivityAttributeData : Swift.Codable {
  public var activityId: Swift.String
  public init(activityId: Swift.String)
  public static func create(activityId: Swift.String) -> PushwooshLiveActivities.PushwooshLiveActivityAttributeData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 16.1, *)
public protocol PushwooshLiveActivityContentState : Swift.Decodable, Swift.Encodable, Swift.Hashable {
  var pushwoosh: PushwooshLiveActivities.PushwooshLiveActivityContentStateData? { get set }
}
public struct PushwooshLiveActivityContentStateData : Swift.Codable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PushwooshLiveActivities.PushwooshLiveActivityContentStateData, b: PushwooshLiveActivities.PushwooshLiveActivityContentStateData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PushwooshBridge.PWLiveActivities {
  public static func sendPushToStartLiveActivity(token: Swift.String)
  public static func sendPushToStartLiveActivity(token: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public static func startLiveActivity(token: Swift.String, activityId: Swift.String)
  public static func startLiveActivity(token: Swift.String, activityId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public static func stopLiveActivity()
  public static func stopLiveActivity(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public static func stopLiveActivity(activityId: Swift.String)
  public static func stopLiveActivity(activityId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @available(iOS 16.1, *)
  public static func setup<Attributes>(_ activityType: Attributes.Type) where Attributes : PushwooshLiveActivities.PushwooshLiveActivityAttributes
  @available(iOS 16.1, *)
  public static func defaultSetup()
  @available(iOS 16.1, *)
  public static func defaultStart(_ activityId: Swift.String, attributes: [Swift.String : Any], content: [Swift.String : Any])
}
public struct DefaultLiveActivityAttributes : PushwooshLiveActivities.PushwooshLiveActivityAttributes {
  public var data: [Swift.String : PushwooshLiveActivities.AnyCodable]
  public var pushwoosh: PushwooshLiveActivities.PushwooshLiveActivityAttributeData
  public struct ContentState : PushwooshLiveActivities.PushwooshLiveActivityContentState {
    public var data: [Swift.String : PushwooshLiveActivities.AnyCodable]
    public var pushwoosh: PushwooshLiveActivities.PushwooshLiveActivityContentStateData?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PushwooshLiveActivities.DefaultLiveActivityAttributes.ContentState, b: PushwooshLiveActivities.DefaultLiveActivityAttributes.ContentState) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(PushwooshLiveActivitiesImplementationSetup) public class PushwooshLiveActivitiesImplementationSetup : ObjectiveC.NSObject, PushwooshBridge.PWLiveActivities {
  @objc public static func sendPushToStartLiveActivity(token: Swift.String)
  @objc public static func sendPushToStartLiveActivity(token: Swift.String, completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  @objc public static func startLiveActivity(token: Swift.String, activityId: Swift.String)
  @objc public static func startLiveActivity(token: Swift.String, activityId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public static func stopLiveActivity()
  @objc public static func stopLiveActivity(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public static func stopLiveActivity(activityId: Swift.String)
  @objc public static func stopLiveActivity(activityId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public static func liveActivities() -> Swift.AnyClass
  @available(iOS 16.1, *)
  public static func configureLiveActivity<Attributes>(_ activityType: Attributes.Type) where Attributes : PushwooshLiveActivities.PushwooshLiveActivityAttributes
  @available(iOS 16.1, *)
  @objc public static func defaultSetup()
  @available(iOS 16.1, *)
  @objc public static func defaultStart(_ activityId: Swift.String, attributes: [Swift.String : Any], content: [Swift.String : Any])
  @available(iOS 17.2, *)
  public static func setPushToStartToken<Attributes>(_ activityType: Attributes.Type, withToken: Swift.String) where Attributes : ActivityKit.ActivityAttributes
  @objc override dynamic public init()
  @objc deinit
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public func asBool() -> Swift.Bool?
  public func asInt() -> Swift.Int?
  public func asDouble() -> Swift.Double?
  public func asString() -> Swift.String?
  public func asArray() -> [PushwooshLiveActivities.AnyCodable]?
  public func asDict() -> [Swift.String : PushwooshLiveActivities.AnyCodable]?
  public init<T>(_ value: T?)
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension PushwooshLiveActivities.AnyCodable : Swift.Equatable {
  public static func == (lhs: PushwooshLiveActivities.AnyCodable, rhs: PushwooshLiveActivities.AnyCodable) -> Swift.Bool
}
extension PushwooshLiveActivities.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension PushwooshLiveActivities.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension PushwooshLiveActivities.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension PushwooshLiveActivities.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
